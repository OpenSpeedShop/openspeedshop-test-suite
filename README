openspeedshop test utility:
__________________________________________________________________________________

The purpose of this utility is to test open speed shop on a number of sample programs and analyze the results. It supports 3 major operations, building, runnning, and comparing.

	- building (use --build-tests) calls one or more of the install scripts located in the build_scripts directory.

	- running the tests can be done with either of the two commands (--create-baseline or --run-tests) the only difference between these commands is the location of the database files. These commands run all the oss tools on all the executable files in the bin directory. these should only be called after building
		the database directory is as follows:
			$install_dir/test_data/$oss_version/[baseline,results]/$date/

	- compare (use --compare-tests) this will run openss -batch on each of the database files in the results and baseline folders. Then it will look at the corresponding results and check to see if they are within acceptable variance (default 10.00%). results will be summarized and printed to the screen.
		by default the script will look for the most recent date folder in the results and baseline folders in the folder for the oss_version specified in environment file. You can manually specify either of these directories with:
		-b for baseline folder
		-r for results folder
		these paths can be absolute or relative to the test_data dir
		eg. -b oss_offline-2.2.2/baseline/2016-05-11_14:28:21.023070/
	or use:
		--baseline-version
	to use the most recent baseline dir for a version other than what is specifed in the env file.
		eg. --baseline-version oss_offline-2.2.2

___________________________________________________________________________________
sample workflow
__________________________________________________________________________________

1)
create the environment file env.json with the command

./test-script.py --create-env

this will create a default environment file env.json populated with
some defaults. Edit these to appropriate values before continuing.

options are as follows:
bin_dir - directory to store compiled tests in
build_scripts_dir - directory containing the build scripts, this should probably not be changed
compilers - the list of compilers to compile with. adding a compilers will call an additional build script.
		e.g. 'compilers':['gnu','intel']    will set the active build scripts to run_build_gnu.sh and run_build_intel.sh
mpi_drivers - list of commands you us to run mpi applications, include argments
		e.g. 'mpi_drivers':['mpirun -np 2']

src_dir - directory containing the source for the tests
test_data_dir - directory to store the test data
input_dir - directory with input files for the tests that require them.
oss_version - the current version of openss. This needs to be manually specified until oss has a --version option
acceptable_variance - floating point value in percent. maximum factor by which baseline and results values can differ and still be allowed to pass
openmpi_root : root directory of openmpi installation
ompt_root : root directory of of ompt installation for libiomp, only used with intel compiler
openss_module : location of the openss module file. this is required when using a job controller only. in all cases the module must be manually loaded before execution of the script as of now.

the following options will generally need to be modified before the first run:
mpi_drivers, compilers, oss_version, openmpi_root (if using openmpi), ompt_root(if using ompt), openss_module (if using a job controller)

2)
build the tests with the command

./test-script.py --build-tests

this will call the build scripts in build_scripts_dir specifed by the compilers option in the env file

3)
create baselines for the various tests

before doing this be sure to load the mpi and openss modules

./test-script.py --create-baseline

this can take some time, results will be in
test_data/baseline/$date by default

4)
create run data for the various tests

./test-script.py --run-tests

this can take some time, results will be in
test_data/results/$date by default

5)
compare the results to the baseline data

./test-script.py --compare-tests

this tools looks in the most recent results and baseline folders by default
soon to add specific folder specification.
by default the tool checks that all values are within 5% of each other.
this number will be an argument soon

see ./test-script.py --help for more options
















_______________________________________________

directory structure after building and running:

openspeedshop-test-suite
	CMakeLists.txt
	cmake
		...
	bin
		...
	build_scripts
		run_build*.sh
	env.json
	src
		...
	test-script.py
	test_data
		baseline
			oss_version
				date
					openss_dbs...
		results
			oss_version
				date
					openss_dbs...
